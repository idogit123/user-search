[{"label":"Start","content":"import express from \"express\"\r\nimport cors from \"cors\"\r\nimport dotenv from \"dotenv\"\r\nimport { getUsers } from \"./client.js\"\r\ndotenv.config()\r\n\r\nconst PORT = process.env.API_PORT as string // how to make it ready for production without ports ???\r\nconst app = express()\r\n\r\napp.use( express.json() )\r\napp.use(\r\n    cors({\r\n        origin: process.env.APP_ORIGIN\r\n    })\r\n)\r\n\r\napp.get('/users', async (req, res) => {\r\n    const queryResult = await getUsers(\r\n        req.query.query as string, \r\n        req.query.sort as string,\r\n        req.query.isDescending as string\r\n    )\r\n\r\n    res.status(200).send(\r\n        queryResult\r\n    )\r\n})\r\n\r\napp.listen(\r\n    PORT,\r\n    () => { console.log(`ravendb client  listening on port: ${PORT}`) }\r\n)"},{"label":"Edit endpoint","content":"import express from \"express\"\r\nimport cors from \"cors\"\r\nimport dotenv from \"dotenv\"\r\nimport { getUsers } from \"./client.js\"\r\ndotenv.config()\r\n\r\nconst PORT = process.env.API_PORT as string // how to make it ready for production without ports ???\r\nconst app = express()\r\n\r\napp.use( express.json() )\r\napp.use(\r\n    cors({\r\n        origin: process.env.APP_ORIGIN\r\n    })\r\n)\r\n\r\napp.get('/users/:page', async (req, res) => {\r\n    const queryResult = await getUsers(\r\n        req.query.query as string, \r\n        req.query.sort as string,\r\n        req.query.isDescending as string\r\n    )\r\n\r\n    res.status(200).send(\r\n        queryResult\r\n    )\r\n})\r\n\r\napp.listen(\r\n    PORT,\r\n    () => { console.log(`ravendb client  listening on port: ${PORT}`) }\r\n)"},{"label":"Add page parameter","content":"import express from \"express\"\r\nimport cors from \"cors\"\r\nimport dotenv from \"dotenv\"\r\nimport { getUsers } from \"./client.js\"\r\ndotenv.config()\r\n\r\nconst PORT = process.env.API_PORT as string // how to make it ready for production without ports ???\r\nconst app = express()\r\n\r\napp.use( express.json() )\r\napp.use(\r\n    cors({\r\n        origin: process.env.APP_ORIGIN\r\n    })\r\n)\r\n\r\napp.get('/users/:page', async (req, res) => {\r\n    const queryResult = await getUsers(\r\n        req.query.query as string, \r\n        req.query.sort as string,\r\n        req.query.isDescending as string,\r\n        req.params.page\r\n    )\r\n\r\n    res.status(200).send(\r\n        queryResult\r\n    )\r\n})\r\n\r\napp.listen(\r\n    PORT,\r\n    () => { console.log(`ravendb client  listening on port: ${PORT}`) }\r\n)"},{"label":"Parse int","content":"import express from \"express\"\r\nimport cors from \"cors\"\r\nimport dotenv from \"dotenv\"\r\nimport { getUsers } from \"./client.js\"\r\ndotenv.config()\r\n\r\nconst PORT = process.env.API_PORT as string // how to make it ready for production without ports ???\r\nconst app = express()\r\n\r\napp.use( express.json() )\r\napp.use(\r\n    cors({\r\n        origin: process.env.APP_ORIGIN\r\n    })\r\n)\r\n\r\napp.get('/users/:page', async (req, res) => {\r\n    const queryResult = await getUsers(\r\n        req.query.query as string, \r\n        req.query.sort as string,\r\n        req.query.isDescending as string,\r\n        parseInt(req.params.page)\r\n    )\r\n\r\n    res.status(200).send(\r\n        queryResult\r\n    )\r\n})\r\n\r\napp.listen(\r\n    PORT,\r\n    () => { console.log(`ravendb client  listening on port: ${PORT}`) }\r\n)"}]