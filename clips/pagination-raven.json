[{"label":"Start","content":"import { DocumentStore, IAuthOptions } from \"ravendb\"\r\nimport { readFileSync } from \"fs\"\r\nimport dotenv from \"dotenv\"\r\nimport { Timer } from \"./Timer.js\"\r\ndotenv.config() // to access enviroment variables\r\n\r\nconst authOptions: IAuthOptions = {\r\n    certificate: readFileSync(process.env.CERTIFICATE_PATH as string),\r\n    type: \"pfx\",\r\n    password: \"\"\r\n}\r\n\r\nconst documentStore = new DocumentStore(\r\n    process.env.SERVER_ADDRESS as string,\r\n    process.env.DATABASE_NAME as string, \r\n    authOptions\r\n)\r\ndocumentStore.initialize()\r\n\r\nconst timer = new Timer()\r\n\r\nexport async function getUsers(query: string, sort: string, isDescending: string, page: number)\r\n{\r\n    const session = documentStore.openSession()\r\n\r\n    let usersQuery = session.query({ collection: 'users' })\r\n        .addOrder(sort, isDescending == \"true\")\r\n\r\n    if (query.length > 0)\r\n        usersQuery\r\n            .whereStartsWith('firstName', query)\r\n        \r\n    timer.start()\r\n    const users = await usersQuery.all()\r\n    timer.end()\r\n\r\n    return {\r\n        users: users,\r\n        durationInMs: timer.getDuration()\r\n    }\r\n}\r\n"},{"label":"Define page size","content":"import { DocumentStore, IAuthOptions } from \"ravendb\"\r\nimport { readFileSync } from \"fs\"\r\nimport dotenv from \"dotenv\"\r\nimport { Timer } from \"./Timer.js\"\r\ndotenv.config() // to access enviroment variables\r\n\r\nconst PAGE_SIZE = 10\r\n\r\nconst authOptions: IAuthOptions = {\r\n    certificate: readFileSync(process.env.CERTIFICATE_PATH as string),\r\n    type: \"pfx\",\r\n    password: \"\"\r\n}\r\n\r\nconst documentStore = new DocumentStore(\r\n    process.env.SERVER_ADDRESS as string,\r\n    process.env.DATABASE_NAME as string, \r\n    authOptions\r\n)\r\ndocumentStore.initialize()\r\n\r\nconst timer = new Timer()\r\n\r\nexport async function getUsers(query: string, sort: string, isDescending: string, page: number)\r\n{\r\n    const session = documentStore.openSession()\r\n\r\n    let usersQuery = session.query({ collection: 'users' })\r\n        .addOrder(sort, isDescending == \"true\")\r\n\r\n    if (query.length > 0)\r\n        usersQuery\r\n            .whereStartsWith('firstName', query)\r\n        \r\n    timer.start()\r\n    const users = await usersQuery.all()\r\n    timer.end()\r\n\r\n    return {\r\n        users: users,\r\n        durationInMs: timer.getDuration()\r\n    }\r\n}\r\n"},{"label":"Skip","content":"import { DocumentStore, IAuthOptions } from \"ravendb\"\r\nimport { readFileSync } from \"fs\"\r\nimport dotenv from \"dotenv\"\r\nimport { Timer } from \"./Timer.js\"\r\ndotenv.config() // to access enviroment variables\r\n\r\nconst PAGE_SIZE = 10\r\n\r\nconst authOptions: IAuthOptions = {\r\n    certificate: readFileSync(process.env.CERTIFICATE_PATH as string),\r\n    type: \"pfx\",\r\n    password: \"\"\r\n}\r\n\r\nconst documentStore = new DocumentStore(\r\n    process.env.SERVER_ADDRESS as string,\r\n    process.env.DATABASE_NAME as string, \r\n    authOptions\r\n)\r\ndocumentStore.initialize()\r\n\r\nconst timer = new Timer()\r\n\r\nexport async function getUsers(query: string, sort: string, isDescending: string, page: number)\r\n{\r\n    const session = documentStore.openSession()\r\n\r\n    let usersQuery = session.query({ collection: 'users' })\r\n        .addOrder(sort, isDescending == \"true\")\r\n        .skip(PAGE_SIZE * page)\r\n\r\n    if (query.length > 0)\r\n        usersQuery\r\n            .whereStartsWith('firstName', query)\r\n        \r\n    timer.start()\r\n    const users = await usersQuery.all()\r\n    timer.end()\r\n\r\n    return {\r\n        users: users,\r\n        durationInMs: timer.getDuration()\r\n    }\r\n}\r\n"},{"label":"Take","content":"import { DocumentStore, IAuthOptions } from \"ravendb\"\r\nimport { readFileSync } from \"fs\"\r\nimport dotenv from \"dotenv\"\r\nimport { Timer } from \"./Timer.js\"\r\ndotenv.config() // to access enviroment variables\r\n\r\nconst PAGE_SIZE = 10\r\n\r\nconst authOptions: IAuthOptions = {\r\n    certificate: readFileSync(process.env.CERTIFICATE_PATH as string),\r\n    type: \"pfx\",\r\n    password: \"\"\r\n}\r\n\r\nconst documentStore = new DocumentStore(\r\n    process.env.SERVER_ADDRESS as string,\r\n    process.env.DATABASE_NAME as string, \r\n    authOptions\r\n)\r\ndocumentStore.initialize()\r\n\r\nconst timer = new Timer()\r\n\r\nexport async function getUsers(query: string, sort: string, isDescending: string, page: number)\r\n{\r\n    const session = documentStore.openSession()\r\n\r\n    let usersQuery = session.query({ collection: 'users' })\r\n        .addOrder(sort, isDescending == \"true\")\r\n        .skip(PAGE_SIZE * page)\r\n        .take(PAGE_SIZE)\r\n\r\n    if (query.length > 0)\r\n        usersQuery\r\n            .whereStartsWith('firstName', query)\r\n        \r\n    timer.start()\r\n    const users = await usersQuery.all()\r\n    timer.end()\r\n\r\n    return {\r\n        users: users,\r\n        durationInMs: timer.getDuration()\r\n    }\r\n}\r\n"}]