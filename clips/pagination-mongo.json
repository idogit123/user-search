[{"label":"start","content":"import { MongoClient } from \"mongodb\"\r\nimport { User } from \"./User.js\"\r\nimport { Timer } from \"./Timer.js\"\r\nimport dotenv from \"dotenv\"\r\ndotenv.config()\r\n\r\nconst databaseInfo = {\r\n    serverPath:  process.env.SERVER_PATH  as string,\r\n    databaseName:   process.env.DATABASE_NAME   as string,\r\n    collectionName: process.env.COLLECTION_NAME as string\r\n}\r\n\r\nconst client = new MongoClient( databaseInfo.serverPath )\r\nconst usersDB = client.db( databaseInfo.databaseName )\r\nconst usersCollection = usersDB.collection<User>( databaseInfo.collectionName )\r\nconst timer = new Timer()\r\n\r\nexport async function getUsers(query: string, sort: string, isDescending: string, page: number) {\r\n    const usersQuery = usersCollection.find<User>(\r\n        {\r\n            'firstName': { $regex: new RegExp(\"^\" + query, \"i\") }\r\n        })\r\n        .sort(sort, isDescending == \"true\" ? -1 : 1)\r\n    \r\n    timer.start()\r\n    const users = await usersQuery.toArray()\r\n    timer.end()\r\n    \r\n    return {\r\n        users: users,\r\n        durationInMs: timer.getDuration()\r\n    }\r\n}"},{"label":"Define page size","content":"import { MongoClient } from \"mongodb\"\r\nimport { User } from \"./User.js\"\r\nimport { Timer } from \"./Timer.js\"\r\nimport dotenv from \"dotenv\"\r\ndotenv.config()\r\n\r\nconst PAGE_SIZE = 10\r\n\r\nconst databaseInfo = {\r\n    serverPath:  process.env.SERVER_PATH  as string,\r\n    databaseName:   process.env.DATABASE_NAME   as string,\r\n    collectionName: process.env.COLLECTION_NAME as string\r\n}\r\n\r\nconst client = new MongoClient( databaseInfo.serverPath )\r\nconst usersDB = client.db( databaseInfo.databaseName )\r\nconst usersCollection = usersDB.collection<User>( databaseInfo.collectionName )\r\nconst timer = new Timer()\r\n\r\nexport async function getUsers(query: string, sort: string, isDescending: string, page: number) {\r\n    const usersQuery = usersCollection.find<User>(\r\n        {\r\n            'firstName': { $regex: new RegExp(\"^\" + query, \"i\") }\r\n        })\r\n        .sort(sort, isDescending == \"true\" ? -1 : 1)\r\n    \r\n    timer.start()\r\n    const users = await usersQuery.toArray()\r\n    timer.end()\r\n    \r\n    return {\r\n        users: users,\r\n        durationInMs: timer.getDuration()\r\n    }\r\n}"},{"label":"skip","content":"import { MongoClient } from \"mongodb\"\r\nimport { User } from \"./User.js\"\r\nimport { Timer } from \"./Timer.js\"\r\nimport dotenv from \"dotenv\"\r\ndotenv.config()\r\n\r\nconst PAGE_SIZE = 10\r\n\r\nconst databaseInfo = {\r\n    serverPath:  process.env.SERVER_PATH  as string,\r\n    databaseName:   process.env.DATABASE_NAME   as string,\r\n    collectionName: process.env.COLLECTION_NAME as string\r\n}\r\n\r\nconst client = new MongoClient( databaseInfo.serverPath )\r\nconst usersDB = client.db( databaseInfo.databaseName )\r\nconst usersCollection = usersDB.collection<User>( databaseInfo.collectionName )\r\nconst timer = new Timer()\r\n\r\nexport async function getUsers(query: string, sort: string, isDescending: string, page: number) {\r\n    const usersQuery = usersCollection.find<User>(\r\n        {\r\n            'firstName': { $regex: new RegExp(\"^\" + query, \"i\") }\r\n        })\r\n        .sort(sort, isDescending == \"true\" ? -1 : 1)\r\n        .skip(PAGE_SIZE * page)\r\n    \r\n    timer.start()\r\n    const users = await usersQuery.toArray()\r\n    timer.end()\r\n    \r\n    return {\r\n        users: users,\r\n        durationInMs: timer.getDuration()\r\n    }\r\n}"},{"label":"Limit","content":"import { MongoClient } from \"mongodb\"\r\nimport { User } from \"./User.js\"\r\nimport { Timer } from \"./Timer.js\"\r\nimport dotenv from \"dotenv\"\r\ndotenv.config()\r\n\r\nconst PAGE_SIZE = 10\r\n\r\nconst databaseInfo = {\r\n    serverPath:  process.env.SERVER_PATH  as string,\r\n    databaseName:   process.env.DATABASE_NAME   as string,\r\n    collectionName: process.env.COLLECTION_NAME as string\r\n}\r\n\r\nconst client = new MongoClient( databaseInfo.serverPath )\r\nconst usersDB = client.db( databaseInfo.databaseName )\r\nconst usersCollection = usersDB.collection<User>( databaseInfo.collectionName )\r\nconst timer = new Timer()\r\n\r\nexport async function getUsers(query: string, sort: string, isDescending: string, page: number) {\r\n    const usersQuery = usersCollection.find<User>(\r\n        {\r\n            'firstName': { $regex: new RegExp(\"^\" + query, \"i\") }\r\n        })\r\n        .sort(sort, isDescending == \"true\" ? -1 : 1)\r\n        .skip(PAGE_SIZE * page)\r\n        .limit(PAGE_SIZE)\r\n    \r\n    timer.start()\r\n    const users = await usersQuery.toArray()\r\n    timer.end()\r\n    \r\n    return {\r\n        users: users,\r\n        durationInMs: timer.getDuration()\r\n    }\r\n}"}]